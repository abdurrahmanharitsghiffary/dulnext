x-frappe-default-site-env: &x-frappe-default-site-env
  FRAPPE_DEFAULT_SITE_DB: ${FRAPPE_DEFAULT_SITE_DB}
  FRAPPE_DEFAULT_SITE_DB_PASSWORD: ${FRAPPE_DEFAULT_SITE_DB_PASSWORD}
  FRAPPE_DEFAULT_SITE_ADMINISTRATOR_PASSWORD: ${FRAPPE_DEFAULT_SITE_ADMINISTRATOR_PASSWORD}
  # Only works on Frappe Version 16
  # FRAPPE_DEFAULT_SITE_DB_USER: ${FRAPPE_DEFAULT_SITE_DB_USER}

x-environment-common: &x-environment-common
  DB_HOST: db
  DB_PORT: "5432"
  REDIS_CACHE: redis-cache:6379
  REDIS_QUEUE: redis-queue:6379
  SOCKETIO_PORT: "9000"
  CUSTOM_APP_NAME: ${CUSTOM_APP_NAME:-dulnext}


x-postgres-env: &x-postgres-env
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_DB: ${POSTGRES_DB}

x-bench-common: &x-bench-common
  build: .
  depends_on:
    create-site:
      condition: service_completed_successfully
  networks:
    - frappe_network
  deploy:
    restart_policy:
      condition: on-failure
  volumes:
    - sites:/home/frappe/frappe-bench/sites
    - logs:/home/frappe/frappe-bench/logs
  environment:
    <<:
      - *x-postgres-env
      - *x-environment-common
      - *x-frappe-default-site-env



services:
  backend:
    <<: *x-bench-common
  configurator:
    build: .
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: none
    entrypoint:
      - bash
      - -c
    command:
      - >
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_QUEUE";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    environment:
      <<: *x-environment-common
    depends_on:
      db:
        condition: service_healthy


  create-site:
    <<: *x-bench-common
    depends_on:
      configurator:
        condition: service_completed_successfully
    entrypoint:
      - bash
      - -c
    command:
      - >
        wait-for-it -t 120 $$DB_HOST:$$DB_PORT;
        wait-for-it -t 120 $$REDIS_CACHE;
        wait-for-it -t 120 $$REDIS_QUEUE;
        export start=`date +%s`;
        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for sites/common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "could not find sites/common_site_config.json with required keys";
            exit 1
          fi
        done;
        echo "sites/common_site_config.json found";
        bench new-site frontend --db-type=postgres --db-name=$$FRAPPE_DEFAULT_SITE_DB --db-password=$$FRAPPE_DEFAULT_SITE_DB_PASSWORD --db-host=$$DB_HOST --db-port=$$DB_PORT --db-root-username=$$POSTGRES_USER --db-root-password=$$POSTGRES_PASSWORD --admin-password=$$FRAPPE_DEFAULT_SITE_ADMINISTRATOR_PASSWORD --set-default --install-app $$CUSTOM_APP_NAME;
        bench migrate;
        bench clear-cache;

  db:
    image: postgres:15
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      <<:
      - *x-postgres-env
      - *x-frappe-default-site-env
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./resources/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$$POSTGRES_USER", "-d", "$$POSTGRES_DB"]
      interval: 10s
      retries: 20
      start_period: 5s

  frontend:
    <<: *x-bench-common
    depends_on:
      backend:
        condition: service_started
    command:
      - nginx-entrypoint.sh
    environment:
      BACKEND: backend:8000
      FRAPPE_SITE_NAME_HEADER: frontend
      SOCKETIO: websocket:9000
      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
      UPSTREAM_REAL_IP_RECURSIVE: "off"
      PROXY_READ_TIMEOUT: 120
      CLIENT_MAX_BODY_SIZE: 50m
    ports:
      - "8080:8080"
  queue-long:
    <<: *x-bench-common

    command:
      - bench
      - worker
      - --queue
      - long,default,short

  queue-short:
    <<: *x-bench-common

    command:
      - bench
      - worker
      - --queue
      - short,default

  redis-queue:
    image: redis:6.2-alpine
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-queue-data:/data

  redis-cache:
    image: redis:6.2-alpine
    networks:
      - frappe_network
    deploy:
      restart_policy:
        condition: on-failure

  scheduler:
    <<: *x-bench-common
    command:
      - bench
      - schedule

  websocket:
    <<: *x-bench-common
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js

volumes:
  db-data:
  redis-queue-data:
  sites:
  logs:

networks:
  frappe_network:
    driver: bridge
